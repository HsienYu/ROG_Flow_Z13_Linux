#!/bin/bash\n\n# Install_Ubuntu25.10.sh - Configurable Ubuntu 25.10 Installation Script for ASUS ROG Flow Z13\n# Author: Gemini (adapted from sqazi\'s Arch script)\n# Version: 2.0.0\n# Date: September 10, 2025\n\nset -e  # Exit on any error\n\n# --- Colors and Global Vars ---\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nYELLOW=\'\\033[1;33m\'\nBLUE=\'\\033[0;34m\'\nNC=\'\\033[0m\' # No Color\n\nUBUNTU_CODENAME="noble" # NOTE: Using 24.04 LTS as a stable base. Update if needed.\n\n# Configuration variables\nFS_TYPE=""\nINSTALL_DESKTOP=""\nINSTALL_GAMING=""\nINSTALL_POWER_MGMT=""\nDUAL_BOOT=""\nENABLE_SNAPSHOTS=""\nDISK_DEVICE=""\nUSERNAME=""\nHOSTNAME=""\nTIMEZONE=""\n\n# --- Helper Functions ---\nprint_status() { echo -e "${GREEN}[INFO]${NC} $1"; }\nprint_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }\nprint_error() { echo -e "${RED}[ERROR]${NC} $1"; }\nprint_header() { echo -e "${BLUE}================================\\n$1\\n================================${NC}"; }\n\n# --- Core Installation Functions ---\n\nconfigure_installation() {\n    print_header "ASUS ROG Flow Z13 Ubuntu 25.10 Installation Configuration"\n    read -p "Choose filesystem [zfs|ext4] (zfs): " fs_choice; FS_TYPE=${fs_choice:-zfs}\n    print_status "Available disks:"; lsblk -d -o NAME,SIZE,MODEL; echo ""\n    while true; do\n        read -p "Enter the disk device (e.g., nvme0n1): " DISK_DEVICE\n        [[ -z "$DISK_DEVICE" ]] && { print_error "Disk device cannot be empty."; continue; }\n        DISK_DEVICE="${DISK_DEVICE#/dev/}"; [[ ! -b "/dev/$DISK_DEVICE" ]] && { print_error "Disk does not exist."; continue; }\n        read -p "Confirm disk /dev/$DISK_DEVICE? (y/n): " confirm_disk; [[ $confirm_disk == "y" ]] && { DISK_DEVICE="/dev/$DISK_DEVICE"; break; }\n    done\n    read -p "Dual-boot with Windows? (y/n): " DUAL_BOOT\n    while true; do read -p "Enter username: " USERNAME; [[ "$USERNAME" =~ ^[a-z_][a-z0-9_-]*$ ]] && break || print_error "Invalid username."; done\n    while true; do read -p "Enter hostname: " HOSTNAME; [[ "$HOSTNAME" =~ ^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$ ]] && break || print_error "Invalid hostname."; done\n    while true; do read -p "Enter timezone (e.g., America/New_York): " TIMEZONE; [[ -f "/usr/share/zoneinfo/$TIMEZONE" ]] && break || print_warning "Timezone not found."; done\n    echo "Desktop: 1) GNOME 2) XFCE 3) KDE 4) i3 5) Minimal"; read -p "Choose (1): " desktop_choice\n    case $desktop_choice in 2) INSTALL_DESKTOP="xfce";; 3) INSTALL_DESKTOP="kde";; 4) INSTALL_DESKTOP="i3";; 5) INSTALL_DESKTOP="minimal";; *) INSTALL_DESKTOP="gnome";; esac\n    read -p "Install gaming setup? (y/n): " INSTALL_GAMING\n    read -p "Install power management? (y/n): " INSTALL_POWER_MGMT\n    [[ "$FS_TYPE" == "zfs" ]] && read -p "Enable ZFS snapshots? (y/n): " ENABLE_SNAPSHOTS\n    read -p "Proceed with installation? (y/n): " confirm; [[ $confirm != "y" ]] && { print_error "Cancelled."; exit 1; }\n}\n\ncheck_prerequisites() {\n    print_header "Checking Prerequisites"\n    [[ ! -d /sys/firmware/efi ]] && { print_error "Not in UEFI mode."; exit 1; }\n    ! ping -c 1 ubuntu.com &> /dev/null && { print_error "No internet."; exit 1; }\n    export DEBIAN_FRONTEND=noninteractive; apt-get update; apt-get install -y debootstrap gdisk zfs-utils\n    timedatectl set-ntp true; print_status "Prerequisites OK."\n}\n\npartition_disk() { # This function is identical to the Arch script and remains robust\n    print_header "Partitioning Disk"\n    if [[ $DUAL_BOOT == "y" ]]; then\n        ram_size=$(free -m | awk \'/^Mem:/{print $2}\'); swap_size=$((ram_size + 1000))\n        sgdisk -n 0:0:+${swap_size}M -t 0:8200 -c 0:"Linux Swap" $DISK_DEVICE\n        sgdisk -n 0:0:0 -t 0:8300 -c 0:"Linux Root" $DISK_DEVICE\n    else\n        sgdisk -Z $DISK_DEVICE; sgdisk -o $DISK_DEVICE\n        ram_size=$(free -m | awk \'/^Mem:/{print $2}\'); swap_size=$((ram_size + 1000))\n        sgdisk -n 1:0:+512M -t 1:ef00 -c 1:"EFI System" $DISK_DEVICE\n        sgdisk -n 2:0:+${swap_size}M -t 2:8200 -c 2:"Linux Swap" $DISK_DEVICE\n        sgdisk -n 3:0:0 -t 3:8300 -c 3:"Linux Root" $DISK_DEVICE\n    fi\n    partprobe $DISK_DEVICE; sleep 2\n    if [[ $DUAL_BOOT == "y" ]]; then\n        mapfile -t new_partitions < <(lsblk -prno NAME "$DISK_DEVICE" | tail -n 2); swap_part="${new_partitions[0]}"; root_part="${new_partitions[1]}"\n        efi_part=$(lsblk -prno NAME,PARTTYPE "$DISK_DEVICE" | grep -i "c12a7328-f81f-11d2-ba4b-00a0c93ec93b" | awk \'{print $1}\')\n    else\n        mapfile -t all_partitions < <(lsblk -prno NAME "$DISK_DEVICE" | tail -n 3); efi_part="${all_partitions[0]}"; swap_part="${all_partitions[1]}"; root_part="${all_partitions[2]}"\n    fi\n    print_status "Partitions assigned: EFI=$efi_part, SWAP=$swap_part, ROOT=$root_part"\n}\n\nsetup_filesystem_and_debootstrap() {\n    print_header "Formatting, Mounting and Installing Base System ($FS_TYPE)"\n    [[ $DUAL_BOOT != "y" ]] && mkfs.fat -F32 -n "EFI" $efi_part\n    mkswap -L "Ubuntu_Swap" $swap_part; swapon $swap_part\n\n    if [[ "$FS_TYPE" == "zfs" ]]; then\n        zpool create -f -o ashift=12 -O compression=zstd -O acltype=posixacl -O xattr=sa -O relatime=on -O normalization=formD -O mountpoint=none -O canmount=off -O dnodesize=auto -R /mnt zroot $root_part\n        zfs create -o mountpoint=none zroot/ROOT; zfs create -o mountpoint=/ -o canmount=noauto zroot/ROOT/default\n        zfs create -o mountpoint=/home zroot/home; zfs create -o mountpoint=/var -o canmount=off zroot/var; zfs create zroot/var/log\n        [[ $ENABLE_SNAPSHOTS == "y" ]] && zfs set com.sun:auto-snapshot=true zroot/ROOT/default\n    else\n        mkfs.ext4 -L "Ubuntu_Root" $root_part; mount $root_part /mnt\n    fi\n\n    print_status "Bootstrapping Ubuntu $UBUNTU_CODENAME..."\n    debootstrap --arch=amd64 $UBUNTU_CODENAME /mnt http://archive.ubuntu.com/ubuntu/\n    \n    if [[ "$FS_TYPE" == "zfs" ]]; then zfs mount zroot/ROOT/default; zfs mount -a; fi\n    mkdir -p /mnt/boot; mount $efi_part /mnt/boot\n    \n    echo "UUID=$( blkid -s UUID -o value $efi_part) /boot vfat defaults 0 1" > /mnt/etc/fstab\n    echo "UUID=$( blkid -s UUID -o value $swap_part) none swap sw 0 0" >> /mnt/etc/fstab\n    [[ "$FS_TYPE" == "ext4" ]] && echo "UUID=$( blkid -s UUID -o value $root_part) / ext4 defaults 0 1" >> /mnt/etc/fstab\n}\n\nconfigure_system_and_install() {\n    print_header "Configuring System and Installing Software"\n    for dir in dev proc sys; do mount --rbind /$dir /mnt/$dir; done\n    echo "nameserver 8.8.8.8" > /mnt/etc/resolv.conf\n\n    chroot /mnt /bin/bash <<CHROOT_EOF\nset -e\nexport DEBIAN_FRONTEND=noninteractive\n\n# Basic system config\necho "$HOSTNAME" > /etc/hostname; echo "127.0.1.1   $HOSTNAME" >> /etc/hosts\napt-get update; apt-get install -y tzdata locales\necho "$TIMEZONE" > /etc/timezone; dpkg-reconfigure -f noninteractive tzdata\necho "en_US.UTF-8 UTF-8" > /etc/locale.gen; locale-gen; update-locale LANG=en_US.UTF-8\n\n# Install kernel, bootloader, and essential packages\napt-get install -y linux-generic grub-efi-amd64 network-manager git zsh\n[[ "$FS_TYPE" == "zfs" ]] && apt-get install -y zfs-initramfs\n[[ "$DUAL_BOOT" == "y" ]] && apt-get install -y os-prober ntfs-3g\n\n# Configure GRUB and verify\n[[ "$DUAL_BOOT" == "y" ]] && sed -i \'s/#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/\' /etc/default/grub\nsed -i \'s/GRUB_CMDLINE_LINUX_DEFAULT="[^"]*/& ibt=off/\' /etc/default/grub\ngrub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=Ubuntu --recheck; update-grub\napt-get install -y efibootmgr; if efibootmgr | grep -qi "Ubuntu"; then echo "Ubuntu boot entry OK"; else echo "Ubuntu boot entry NOT FOUND"; fi\nif [[ "$DUAL_BOOT" == "y" ]]; then if grep -qi "Windows" /boot/grub/grub.cfg; then echo "Windows detected"; else echo "Windows NOT detected"; fi; fi\n\n# Create user\napt-get install -y sudo; useradd -m -G sudo -s /bin/zsh "$USERNAME"\n\n# Hardware Fixes\nmkdir -p /etc/modprobe.d; echo "options mt7925e disable_aspm=1" > /etc/modprobe.d/mt7925e.conf\ncat > /etc/systemd/system/reload-hid_asus.service << EOH\n[Unit]\nDescription=Reload hid_asus module\n[Service]\nType=oneshot\nExecStart=/usr/bin/modprobe -r hid_asus; /usr/bin/modprobe hid_asus\n[Install]\nWantedBy=multi-user.target\nEOH\nsystemctl enable reload-hid_asus.service\n\n# Power Management\nif [[ "$INSTALL_POWER_MGMT" == "y" ]]; then\n    apt-get install -y software-properties-common\n    add-apt-repository ppa:asus-linux/asus-nb-ctrl -y; apt-get update\n    apt-get install -y asusctl tlp; systemctl enable tlp; systemctl enable asusd.service\n    echo -e "TLP_DEFAULT_MODE=AC\\nCPU_SCALING_GOVERNOR_ON_AC=performance\\nCPU_SCALING_GOVERNOR_ON_BAT=powersave" >> /etc/tlp.conf\nfi\n\n# Desktop & Gaming\napt-get install -y ubuntu-drivers-common\ncase "$INSTALL_DESKTOP" in\n    "gnome") apt-get install -y ubuntu-desktop;; \n    "xfce") apt-get install -y xubuntu-desktop;; \n    "kde") apt-get install -y kubuntu-desktop;; \n    "i3") apt-get install -y i3 i3status xorg lightdm;; \nesac\nif [[ "$INSTALL_GAMING" == "y" ]]; then\n    dpkg --add-architecture i386; apt-get update\n    apt-get install -y steam-installer gamemode mangohud libvulkan1:i386\n    add-apt-repository ppa:lutris-team/lutris -y; apt-get update; apt-get install -y lutris\nfi\n\n# Snapshots\nif [[ "$ENABLE_SNAPSHOTS" == "y" ]]; then apt-get install -y zfs-auto-snapshot; fi\n\napt-get upgrade -y\nCHROOT_EOF\n    print_status "System configuration completed."\n}\n\ncreate_post_install_script() {\n    local script_path="/mnt/home/$USERNAME/Z13_Quick_Tips.txt"\n    cat > "$script_path" << EOF\nWelcome to Ubuntu on your ROG Flow Z13!\n\n--- Power Management ---\nsudo asusctl profile -P Performance\n\n--- Filesystem ---\n# Check filesystem usage\ndf -h\nEOF\n    if [[ "$FS_TYPE" == "zfs" ]]; then echo -e "\n--- ZFS Snapshots ---\nzfs list -t snapshot" >> "$script_path"; fi\n    chroot /mnt chown $USERNAME:$USERNAME /home/$USERNAME/Z13_Quick_Tips.txt\n}\n\nrepair_bootloader_standalone() {\n    print_header "EFI Bootloader Repair"\n    print_warning "This expects your Linux root at /mnt and EFI partition at /mnt/boot."\n    read -p "Are partitions mounted? (y/n): " confirm_mount; [[ $confirm_mount != "y" ]] && exit 1\n    for dir in dev proc sys; do mount --rbind /$dir /mnt/$dir; done\n    chroot /mnt /bin/bash <<EOF\nexport DEBIAN_FRONTEND=noninteractive\napt-get update; apt-get install -y grub-efi-amd64 efibootmgr os-prober\necho "GRUB_DISABLE_OS_PROBER=false" >> /etc/default/grub\ngrub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=Ubuntu-Repaired --recheck\nupdate-grub; echo "Repair finished."\nEOF\n}\n\nfull_installation() {\n    trap "print_error \"Installation failed. Cleaning up...\"; umount -R /mnt 2>/dev/null; if [[ \"$FS_TYPE\" == \"zfs\" ]]; then zpool destroy -f zroot 2>/dev/null; fi; exit 1" ERR\n    configure_installation; check_prerequisites; partition_disk; setup_filesystem_and_debootstrap\n    configure_system_and_install; create_post_install_script\n    print_header "Setting Passwords"; chroot /mnt passwd; chroot /mnt passwd $USERNAME\n    print_header "Installation Complete"; umount -R /mnt; print_status "Reboot to enjoy!"\n    read -p "Reboot now? (y/n): " r; [[ $r == "y" ]] && reboot\n}\n\nmain() {\n    [[ $EUID -ne 0 ]] && { print_error "Run as root."; exit 1; }\n    print_header "ASUS ROG Flow Z13 Ubuntu Setup"\n    echo "1) Perform a full installation"; echo "2) Repair EFI bootloader"\n    read -p "Choose an option [1-2]: " main_choice\n    case $main_choice in 1) full_installation;; 2) repair_bootloader_standalone;; *) exit 1;; esac\n}\n\nmain "$@"\n